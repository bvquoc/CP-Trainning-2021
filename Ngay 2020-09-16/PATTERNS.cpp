#include <bits/stdc++.h>
#define FastIO ios::sync_with_stdio(0); cin.tie(nullptr); cout.tie(nullptr);
#define fi first
#define se second
#define FOR(i, a, b) for(int i=a; i<=b; i++)
#define FORD(i, a, b) for(int i=a; i>=b; i--)
#define endl '\n'
using namespace std;

int c[1000][1000];

signed main(void) {
    FastIO;
    freopen("PATTERNS.INP","r",stdin);
    freopen("PATTERNS.OUT","w",stdout);
    
    c['?']['0'] = 1; c['0']['?'] = 1;
    c['?']['1'] = 1; c['1']['?'] = 1;
    c['?']['2'] = 1; c['2']['?'] = 1;
    c['?']['3'] = 1; c['3']['?'] = 1;
    c['?']['4'] = 1; c['4']['?'] = 1;
    c['?']['5'] = 1; c['5']['?'] = 1;
    c['?']['6'] = 1; c['6']['?'] = 1;
    c['?']['7'] = 1; c['7']['?'] = 1;
    c['?']['8'] = 1; c['8']['?'] = 1;
    c['?']['9'] = 1; c['9']['?'] = 1;
    c['0']['0'] = 1; c['0']['0'] = 1;
    c['0']['1'] = 0; c['1']['0'] = 0;
    c['0']['2'] = 0; c['2']['0'] = 0;
    c['0']['3'] = 0; c['3']['0'] = 0;
    c['0']['4'] = 0; c['4']['0'] = 0;
    c['0']['5'] = 0; c['5']['0'] = 0;
    c['0']['6'] = 0; c['6']['0'] = 0;
    c['0']['7'] = 0; c['7']['0'] = 0;
    c['0']['8'] = 0; c['8']['0'] = 0;
    c['0']['9'] = 0; c['9']['0'] = 0;
    c['1']['1'] = 1; c['1']['1'] = 1;
    c['1']['2'] = 0; c['2']['1'] = 0;
    c['1']['3'] = 0; c['3']['1'] = 0;
    c['1']['4'] = 0; c['4']['1'] = 0;
    c['1']['5'] = 0; c['5']['1'] = 0;
    c['1']['6'] = 0; c['6']['1'] = 0;
    c['1']['7'] = 0; c['7']['1'] = 0;
    c['1']['8'] = 0; c['8']['1'] = 0;
    c['1']['9'] = 0; c['9']['1'] = 0;
    c['2']['2'] = 1; c['2']['2'] = 1;
    c['2']['3'] = 0; c['3']['2'] = 0;
    c['2']['4'] = 0; c['4']['2'] = 0;
    c['2']['5'] = 0; c['5']['2'] = 0;
    c['2']['6'] = 0; c['6']['2'] = 0;
    c['2']['7'] = 0; c['7']['2'] = 0;
    c['2']['8'] = 0; c['8']['2'] = 0;
    c['2']['9'] = 0; c['9']['2'] = 0;
    c['3']['3'] = 1; c['3']['3'] = 1;
    c['3']['4'] = 0; c['4']['3'] = 0;
    c['3']['5'] = 0; c['5']['3'] = 0;
    c['3']['6'] = 0; c['6']['3'] = 0;
    c['3']['7'] = 0; c['7']['3'] = 0;
    c['3']['8'] = 0; c['8']['3'] = 0;
    c['3']['9'] = 0; c['9']['3'] = 0;
    c['4']['4'] = 1; c['4']['4'] = 1;
    c['4']['5'] = 0; c['5']['4'] = 0;
    c['4']['6'] = 0; c['6']['4'] = 0;
    c['4']['7'] = 0; c['7']['4'] = 0;
    c['4']['8'] = 0; c['8']['4'] = 0;
    c['4']['9'] = 0; c['9']['4'] = 0;
    c['5']['5'] = 1; c['5']['5'] = 1;
    c['5']['6'] = 0; c['6']['5'] = 0;
    c['5']['7'] = 0; c['7']['5'] = 0;
    c['5']['8'] = 0; c['8']['5'] = 0;
    c['5']['9'] = 0; c['9']['5'] = 0;
    c['6']['6'] = 1; c['6']['6'] = 1;
    c['6']['7'] = 0; c['7']['6'] = 0;
    c['6']['8'] = 0; c['8']['6'] = 0;
    c['6']['9'] = 0; c['9']['6'] = 0;
    c['7']['7'] = 1; c['7']['7'] = 1;
    c['7']['8'] = 0; c['8']['7'] = 0;
    c['7']['9'] = 0; c['9']['7'] = 0;
    c['8']['8'] = 1; c['8']['8'] = 1;
    c['8']['9'] = 0; c['9']['8'] = 0;
    c['9']['9'] = 1; c['9']['9'] = 1;
    c['a']['0'] = 1; c['0']['a'] = 1;
    c['a']['1'] = 1; c['1']['a'] = 1;
    c['a']['2'] = 1; c['2']['a'] = 1;
    c['a']['3'] = 1; c['3']['a'] = 1;
    c['a']['4'] = 0; c['4']['a'] = 0;
    c['a']['5'] = 0; c['5']['a'] = 0;
    c['a']['6'] = 0; c['6']['a'] = 0;
    c['a']['7'] = 0; c['7']['a'] = 0;
    c['a']['8'] = 0; c['8']['a'] = 0;
    c['a']['9'] = 0; c['9']['a'] = 0;
    c['b']['0'] = 0; c['0']['b'] = 0;
    c['b']['1'] = 1; c['1']['b'] = 1;
    c['b']['2'] = 1; c['2']['b'] = 1;
    c['b']['3'] = 1; c['3']['b'] = 1;
    c['b']['4'] = 1; c['4']['b'] = 1;
    c['b']['5'] = 0; c['5']['b'] = 0;
    c['b']['6'] = 0; c['6']['b'] = 0;
    c['b']['7'] = 0; c['7']['b'] = 0;
    c['b']['8'] = 0; c['8']['b'] = 0;
    c['b']['9'] = 0; c['9']['b'] = 0;
    c['c']['0'] = 0; c['0']['c'] = 0;
    c['c']['1'] = 0; c['1']['c'] = 0;
    c['c']['2'] = 1; c['2']['c'] = 1;
    c['c']['3'] = 1; c['3']['c'] = 1;
    c['c']['4'] = 1; c['4']['c'] = 1;
    c['c']['5'] = 1; c['5']['c'] = 1;
    c['c']['6'] = 0; c['6']['c'] = 0;
    c['c']['7'] = 0; c['7']['c'] = 0;
    c['c']['8'] = 0; c['8']['c'] = 0;
    c['c']['9'] = 0; c['9']['c'] = 0;
    c['d']['0'] = 0; c['0']['d'] = 0;
    c['d']['1'] = 0; c['1']['d'] = 0;
    c['d']['2'] = 0; c['2']['d'] = 0;
    c['d']['3'] = 1; c['3']['d'] = 1;
    c['d']['4'] = 1; c['4']['d'] = 1;
    c['d']['5'] = 1; c['5']['d'] = 1;
    c['d']['6'] = 1; c['6']['d'] = 1;
    c['d']['7'] = 0; c['7']['d'] = 0;
    c['d']['8'] = 0; c['8']['d'] = 0;
    c['d']['9'] = 0; c['9']['d'] = 0;
    c['e']['0'] = 0; c['0']['e'] = 0;
    c['e']['1'] = 0; c['1']['e'] = 0;
    c['e']['2'] = 0; c['2']['e'] = 0;
    c['e']['3'] = 0; c['3']['e'] = 0;
    c['e']['4'] = 1; c['4']['e'] = 1;
    c['e']['5'] = 1; c['5']['e'] = 1;
    c['e']['6'] = 1; c['6']['e'] = 1;
    c['e']['7'] = 1; c['7']['e'] = 1;
    c['e']['8'] = 0; c['8']['e'] = 0;
    c['e']['9'] = 0; c['9']['e'] = 0;
    c['f']['0'] = 0; c['0']['f'] = 0;
    c['f']['1'] = 0; c['1']['f'] = 0;
    c['f']['2'] = 0; c['2']['f'] = 0;
    c['f']['3'] = 0; c['3']['f'] = 0;
    c['f']['4'] = 0; c['4']['f'] = 0;
    c['f']['5'] = 1; c['5']['f'] = 1;
    c['f']['6'] = 1; c['6']['f'] = 1;
    c['f']['7'] = 1; c['7']['f'] = 1;
    c['f']['8'] = 1; c['8']['f'] = 1;
    c['f']['9'] = 0; c['9']['f'] = 0;
    c['g']['0'] = 0; c['0']['g'] = 0;
    c['g']['1'] = 0; c['1']['g'] = 0;
    c['g']['2'] = 0; c['2']['g'] = 0;
    c['g']['3'] = 0; c['3']['g'] = 0;
    c['g']['4'] = 0; c['4']['g'] = 0;
    c['g']['5'] = 0; c['5']['g'] = 0;
    c['g']['6'] = 1; c['6']['g'] = 1;
    c['g']['7'] = 1; c['7']['g'] = 1;
    c['g']['8'] = 1; c['8']['g'] = 1;
    c['g']['9'] = 1; c['9']['g'] = 1;
    c['?']['?'] = 10; c['?']['?'] = 10;
    c['?']['a'] = 4; c['a']['?'] = 4;
    c['?']['b'] = 4; c['b']['?'] = 4;
    c['?']['c'] = 4; c['c']['?'] = 4;
    c['?']['d'] = 4; c['d']['?'] = 4;
    c['?']['e'] = 4; c['e']['?'] = 4;
    c['?']['f'] = 4; c['f']['?'] = 4;
    c['?']['g'] = 4; c['g']['?'] = 4;
    c['a']['a'] = 4; c['a']['a'] = 4;
    c['a']['b'] = 3; c['b']['a'] = 3;
    c['a']['c'] = 2; c['c']['a'] = 2;
    c['a']['d'] = 1; c['d']['a'] = 1;
    c['a']['e'] = 0; c['e']['a'] = 0;
    c['a']['f'] = 0; c['f']['a'] = 0;
    c['a']['g'] = 0; c['g']['a'] = 0;
    c['b']['b'] = 4; c['b']['b'] = 4;
    c['b']['c'] = 3; c['c']['b'] = 3;
    c['b']['d'] = 2; c['d']['b'] = 2;
    c['b']['e'] = 1; c['e']['b'] = 1;
    c['b']['f'] = 0; c['f']['b'] = 0;
    c['b']['g'] = 0; c['g']['b'] = 0;
    c['c']['c'] = 4; c['c']['c'] = 4;
    c['c']['d'] = 3; c['d']['c'] = 3;
    c['c']['e'] = 2; c['e']['c'] = 2;
    c['c']['f'] = 1; c['f']['c'] = 1;
    c['c']['g'] = 0; c['g']['c'] = 0;
    c['d']['d'] = 4; c['d']['d'] = 4;
    c['d']['e'] = 3; c['e']['d'] = 3;
    c['d']['f'] = 2; c['f']['d'] = 2;
    c['d']['g'] = 1; c['g']['d'] = 1;
    c['e']['e'] = 4; c['e']['e'] = 4;
    c['e']['f'] = 3; c['f']['e'] = 3;
    c['e']['g'] = 2; c['g']['e'] = 2;
    c['f']['f'] = 4; c['f']['f'] = 4;
    c['f']['g'] = 3; c['g']['f'] = 3;
    c['g']['g'] = 4; c['g']['g'] = 4;

    string s1, s2;
    cin >> s1 >> s2;
    if (s1.length() != s2.length()) {
        cout << '0';
        return 0;
    }

    long long res = 1;
    FOR(i,0,s1.length()-1) {
        res *= c[s1[i]][s2[i]];
    }
    cout << res;
    return 0;
}