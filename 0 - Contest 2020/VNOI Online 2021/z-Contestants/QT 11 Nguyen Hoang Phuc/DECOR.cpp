#include <bits/stdc++.h>#define fi first#define se secondusing namespace std;const int N = 5e5+7;int n, m, k;int s[N], pres[N];pair<int,int> fa[N];vector<pair<int,int>> edge;int num0, cnt[N];void sub1() {    if (pres[n] == 0) {        return cout << -1, void();    }    int l = 0, r = -1;    int cnt = 0;    for (int i = 1; i <= n; ++i) {        cnt++;        if (i==n || s[i] != s[i+1]) {            if (s[i] == 1) {                if (r-l+1 < cnt) {                    l = i-cnt+1;                    r = i;                }            }            cnt = 0;        }    }    cout << l << ' ' << r;}void sub2() {    if (pres[n] == 0 && k == 0) {        return cout << -1, void();    }    int lef = 0, rig = -1;    for (int i = 1; i <= n; ++i) {        int l = i, r = n, p = -1;        while (l<=r) {            int m = l+r>>1;            if ((m-i+1) - (pres[m]-pres[i-1]) <= k) {                p = m; l = m+1;            } else r = m-1;        }        if (p != -1) {            if (rig-lef+1 < p-i+1) {                lef = i; rig = p;            }        }    }    cout << lef << ' ' << rig;}int root(int u) {    if (fa[u].fi < 0) return u;    return fa[u].fi = root(fa[u].fi);}void Union(int u, int v) {    u = root(u);    v = root(v);    if (u == v) return;    if (fa[u].fi > fa[v].fi) {        swap(u,v);    }    fa[u].fi += fa[v].fi;    fa[u].se += fa[v].se;    fa[v].fi = u;}void Push(int i) {    int rt = root(i);    if (++cnt[rt] > fa[rt].se) {        num0++;    }}int ifPush(int i) {    int rt = root(i);    return num0 + (cnt[rt]+1 > fa[rt].se);}void Pop(int i) {    int rt = root(i);    if (--cnt[rt] >= fa[rt].se) {        num0--;    }}void othersub() {    if (pres[n] == 0 && k == 0) {        return cout << -1, void();    }    int lef = 0, rig = -1;    for (int i = 1; i <= n; ++i) {        fa[i] = {-1,s[i]};    }    for (auto e : edge) {        Union(e.fi,e.se);    }    int j = 1;    for (int i = 1; i <= n; ++i) {        while (j <= n && ifPush(j) <= k) {            Push(j++);        }        if (rig-lef+1 < j-i) {            lef = i; rig = j-1;        }        Pop(i);    }    cout << lef << ' ' << rig;}int main() {    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);    freopen("DECOR.INP", "r", stdin);    freopen("DECOR.OUT", "w", stdout);    cin >> n >> m >> k;    for (int i = 1; i <= n; ++i) {        char c; cin >> c;        s[i] = c - '0';        pres[i] = pres[i-1] + s[i];    }    for (int i = 1; i <= m; ++i) {        int x, y;        cin >> x >> y;        edge.push_back({x,y});    }    if (m == 0 && k == 0) {        sub1();    }    else if (m == 0) {        sub2();    }    else othersub();    return 0;}