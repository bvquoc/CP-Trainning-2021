#include <bits/stdc++.h>#define getbit(x,k) ((x>>k)&1)#define turnon(x,k) (x|(1<<k))#define fi first#define se secondusing namespace std;const int N = 1e5+7;const long long inf = 1e18;int n, m, k, l;int s[N];vector<pair<int,int>> adj[N];long long dsub2[N], d[N][70];void dijkstra() {    for (int i = 1; i <= n; ++i)    for (int j = 0; j < 70; ++j) {        d[i][j] = inf;    }    priority_queue<pair<long long,pair<int,int>>> heap;    d[1][s[1]] = 0;    heap.push({0,{1,s[1]}});    while (!heap.empty()) {        long long w = -heap.top().fi;        int u = heap.top().se.fi;        int mask = heap.top().se.se;        heap.pop();        if (w > d[u][mask]) continue;        for (auto tmp : adj[u]) {            int v = tmp.fi;            int w = tmp.se;            if (d[v][mask|s[v]] > d[u][mask] + w) {                d[v][mask|s[v]] = d[u][mask] + w;                heap.push({-d[v][mask|s[v]],{v,mask|s[v]}});            }        }    }}void dijkstra_sub2() {    fill(dsub2, dsub2+n+1, inf);    priority_queue<pair<long long, int>> heap;    dsub2[1] = 0;    heap.push({0,1});    while (!heap.empty()) {        long long w = -heap.top().fi;        int u = heap.top().se;        heap.pop();        if (w > dsub2[u]) continue;        for (auto tmp : adj[u]) {            int v = tmp.fi;            int w = tmp.se;            if (dsub2[v] > dsub2[u] + w) {                dsub2[v] = dsub2[u] + w;                heap.push({-dsub2[v],v});            }        }    }}long long sub2() {    dijkstra_sub2();    return dsub2[n] == inf ? -1 : dsub2[n];}long long othersub() {    dijkstra();    long long res = inf;    int maxs = ((1<<k)-1)<<1;    for (int mask = maxs; mask > 0; mask = (mask-1) & maxs) {        int nb1 = __builtin_popcount(mask);        if (nb1 >= l)            res = min(res,d[n][mask]);    }    if (l == 0)        res = min(res, d[n][0]);    return res == inf ? -1 : res;}int main() {    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);    freopen("DHAKA.INP", "r", stdin);    freopen("DHAKA.OUT", "w", stdout);    cin >> n >> m >> k >> l;    for (int i = 1; i <= n; ++i) {        int num; cin >> num;        for (int j = 1; j <= num; ++j) {            int p; cin >> p;            s[i] = turnon(s[i],p);        }    }    for (int i = 1; i <= m; ++i) {        int x, y, c;        cin >> x >> y >> c;        adj[x].push_back({y,c});        adj[y].push_back({x,c});    }    if (l == 0) cout << sub2();    else cout << othersub();    return 0;}